n, m = map(int,input().split())
graph = [[] for i in range(n+1)]
for i in range(m):
    a,b,c = map(int,input().split())
    graph[a].append((b,c))
    graph[b].append((a,c))

start, end = map(int,input().split())
##초기화

from collections import deque
def bfs(start,mid):
    #print(mid)
    q = deque()
    q.append(start)
    visited[start] = 1
    while q:
        v = q.popleft()
        #print(v, visited)
        if v == end:
            return True
        for nx, nc in graph[v]:
            if visited[nx] == 0 and nc >= mid:
                q.append(nx)
                visited[nx] = 1
    return False

low, high = 1, int(1e9)
while low <= high:
    visited = [0] * (n+1)
    mid = (low + high) // 2
    if bfs(start,mid):
        low = mid + 1
    else:
        high = mid - 1
print(high)
